package com.mobilematching.admin.glassprotector;

import java.io.IOException;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.util.StringUtils;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import com.mobilematching.admin.brands.BrandService;
import com.mobilematching.admin.mobiles.MobileService;

import com.mobilematching.admin.util.FileUploadUtil;
import com.mobilematching.entity.Brand;
import com.mobilematching.entity.GlassProtector;
import com.mobilematching.entity.Mobile;
import com.mobilematching.entity.PrimaryModel;
import com.mobilematching.exception.GlassProtectorNotFoundException;

@Controller
public class GlassProtectorController {

    @Autowired
    private GlassProtectorService glassProtectorService;

    @Autowired
    private MobileService mobileService;

    @Autowired
    private BrandService brandService;

    @Autowired
    private PrimaryModelService primaryModelService;

    @GetMapping("/glass_protectors")
    public String listFirstPage(Model model) {
        return listByPage(1, model, "name", "asc", null);
    }

    @GetMapping("/glass_protectors/page/{pageNum}")
    public String listByPage(@PathVariable(name = "pageNum") int pageNum, Model model,
                             @Param("sortField") String sortField,
                             @Param("sortDir") String sortDir,
                             @Param("keyword") String keyword) {

        Page<GlassProtector> page = glassProtectorService.listByPage(pageNum, sortField, sortDir, keyword);
        List<GlassProtector> listGlassProtectors = page.getContent();

        long startCount = (pageNum - 1) * GlassProtectorService.GLASS_PROTECTORS_PER_PAGE + 1;
        long endCount = startCount + GlassProtectorService.GLASS_PROTECTORS_PER_PAGE - 1;
        if (endCount > page.getTotalElements()) {
            endCount = page.getTotalElements();
        }

        String reverseSortDir = sortDir.equals("asc") ? "desc" : "asc";

        model.addAttribute("currentPage", pageNum);
        model.addAttribute("totalPages", page.getTotalPages());
        model.addAttribute("startCount", startCount);
        model.addAttribute("endCount", endCount);
        model.addAttribute("totalItems", page.getTotalElements());
        model.addAttribute("sortField", sortField);
        model.addAttribute("sortDir", sortDir);
        model.addAttribute("reverseSortDir", reverseSortDir);
        model.addAttribute("keyword", keyword);

        model.addAttribute("listGlassProtectors", listGlassProtectors);

        return "glass_protectors/glass_protectors"; // Your Thymeleaf list page
    }

    @GetMapping("/glass_protectors/new")
    public String newGlassProtector(Model model) {
        GlassProtector protector = new GlassProtector();
        List<Brand> listBrands = brandService.listAll();
      
        List<PrimaryModel> listPrimaryModels = primaryModelService.listAll();

        model.addAttribute("protector", protector);
        model.addAttribute("listBrands", listBrands);
        model.addAttribute("listMobiles", listMobiles);
        model.addAttribute("listPrimaryModels", listPrimaryModels);
        model.addAttribute("pageTitle", "Create New Glass Protector");

        return "glass_protectors/glass_form";
    }

    @PostMapping("/glass_protectors/save")
    public String saveGlassProtector(GlassProtector protector,
                                     RedirectAttributes redirectAttributes,
                                       @RequestParam("fileImage") MultipartFile multipartFile,
                                     @RequestParam(value = "compatibleMobiles", required = false) List<Long> mobileIds) throws IOException {

        if (!multipartFile.isEmpty()) {
            String fileName = StringUtils.cleanPath(multipartFile.getOriginalFilename());
          //  protector.setImage(fileName);
            String uploadDir = "./glass-protector-photos/";
            FileUploadUtil.saveFile(uploadDir, fileName, multipartFile);
        }

        glassProtectorService.save(protector, mobileIds);

        redirectAttributes.addFlashAttribute("message", "The glass protector has been saved successfully.");
        return "redirect:/glass_protectors";
    }

    @GetMapping("/glass_protectors/edit/{id}")
    public String editGlassProtector(@PathVariable(name = "id") Long id, Model model, RedirectAttributes ra) {
        try {
            GlassProtector protector = glassProtectorService.get(id);

            List<Mobile> existingMobilesInDB = List.copyOf(protector.getCompatibleMobiles());
            List<Brand> listBrands = brandService.listAll();
            List<Mobile> listMobiles = mobileService.listAll();
            List<PrimaryModel> listPrimaryModels = primaryModelService.listAll();

            model.addAttribute("protector", protector);
            model.addAttribute("listBrands", listBrands);
            model.addAttribute("listMobiles", listMobiles);
            model.addAttribute("listPrimaryModels", listPrimaryModels);
            model.addAttribute("existingMobilesInDB", existingMobilesInDB);
            model.addAttribute("pageTitle", "Edit Glass Protector (ID: " + id + ")");

            return "glass_protectors/glass_form";
        } catch (GlassProtectorNotFoundException ex) {
            ra.addFlashAttribute("message", ex.getMessage());
            return "redirect:/glass_protectors";
        }
    }
}

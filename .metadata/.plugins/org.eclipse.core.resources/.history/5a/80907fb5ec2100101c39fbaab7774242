package com.mobilematching.admin.glassprotector;

import static org.assertj.core.api.Assertions.assertThat;

import java.util.List;
import java.util.Set;

import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.jdbc.AutoConfigureTestDatabase;
import org.springframework.boot.test.autoconfigure.orm.jpa.DataJpaTest;
import org.springframework.test.annotation.Rollback;

import com.mobilematching.admin.glassprotector.GlassProtectorRepository;
import com.mobilematching.admin.mobiles.MobileRepository;
import com.mobilematching.entity.GlassProtector;
import com.mobilematching.entity.Mobile;
import com.mobilematching.entity.PrimaryModels;
@DataJpaTest
@AutoConfigureTestDatabase(replace = AutoConfigureTestDatabase.Replace.NONE)
@Rollback(false)
public class GlassProtectorTests {

	 @Autowired
	    private GlassProtectorRepository glassProtectorRepo;

	    @Autowired
	    private MobileRepository mobileRepo;
	    
	    
	    @Test
	    public void testCreateGlassProtectorWithCompatibleModels() {
	        Mobile m1 = mobileRepo.findByName("Y20");
	        Mobile m2 = mobileRepo.findByName("Camon 20");

	        GlassProtector protector = new GlassProtector();
	        protector.setName("Vivo Y20 Tempered Glass");
	        protector.setPrimaryModel(PrimaryModels.Y20);
	        protector.setCompatibleModels(Set.of(m1, m2));

	        GlassProtector saved = glassProtectorRepo.save(protector);

	        assertThat(saved.getId()).isNotNull();
	        assertThat(saved.getCompatibleModels().size()).isEqualTo(2);
	    }
	    
	    @Test
	    public void testFetchProtectorByPrimaryModel() {
	        List<GlassProtector> protectors = glassProtectorRepo.findAll();

	        GlassProtector match = protectors.stream()
	                .filter(p -> p.getPrimaryModel() == PrimaryModels.Y20)
	                .findFirst()
	                .orElse(null);

	        assertThat(match).isNotNull();
	        assertThat(match.getCompatibleModels()).isNotEmpty();
	    }
	    
	    @Test
	    public void testUpdateProtector() {
	        GlassProtector protector = glassProtectorRepo.findAll().get(0);
	        protector.setName("Updated Tempered Glass Name");

	        GlassProtector updated = glassProtectorRepo.save(protector);

	        assertThat(updated.getName()).isEqualTo("Updated Tempered Glass Name");
	    }

	    @Test
	    public void testDeleteProtector() {
	        List<GlassProtector> all = glassProtectorRepo.findAll();
	        if (!all.isEmpty()) {
	            glassProtectorRepo.delete(all.get(0));
	        }

	        long count = glassProtectorRepo.count();
	        assertThat(count).isGreaterThanOrEqualTo(0);
	    }
	
}

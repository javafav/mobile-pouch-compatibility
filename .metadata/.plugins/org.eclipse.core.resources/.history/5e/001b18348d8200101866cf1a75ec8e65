package com.mobilematching.site.glassprotector;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Set;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.mobilematching.common.entity.GlassProtector;
import com.mobilematching.common.entity.Mobile;
import com.mobilematching.site.mobiles.MobileRepository;

@Service
public class GlassProtectorService {

//	 private final GlassProtectorRepository glassProtectorRepo;
//
//	    public GlassProtectorService(GlassProtectorRepository glassProtectorRepo) {
//	        this.glassProtectorRepo = glassProtectorRepo;
//	    }
//
//	    public List<GlassProtector> searchGlassProtectorsByMobile(String mobileName) {
//	        return glassProtectorRepo.searchByCompatibleMobileName(mobileName);
//	    }

	@Autowired
	private GlassProtectorRepository glassProtectorRepo;
	@Autowired
	private MobileRepository mobileRepo;

	public PrimaryAndCompatibleModelsDto findPrimaryAndCompatibleMobiles(String search) {
	    // 1. Find the primary model based on the search term
		Mobile primaryModel = mobileRepo.findByNameIgnoreCase(search)
				.or(() -> mobileRepo.findByModlIgnoreCase(search)
				.or(() -> mobileRepo.findFirstByNameIgnoreCaseContaining(search)
			     		)
			    .orElseThrow(() -> new RuntimeException("Mobile not found: " + search));

	    System.out.println("[Service] Found primary model: " + primaryModel.getName() + " (ID: " + primaryModel.getId() + ")");

	    // 2. Find all glass protectors compatible with this model
	    List<GlassProtector> protectors = glassProtectorRepo.findByCompatibleMobile(primaryModel.getId());
	    if (protectors == null) {
	        protectors = Collections.emptyList();
	    }
	    System.out.println("[Service] Found " + protectors.size() + " glass protectors for this model.");

	    // 3. Find all mobiles compatible with those glass protectors
	    Set<Mobile> compatibleMobiles = protectors.stream()
	            .flatMap(gp -> gp.getCompatibleMobiles().stream())
	            .filter(m -> !m.getId().equals(primaryModel.getId())) // exclude primary
	            .collect(Collectors.toSet());

	    System.out.println("[Service] Found " + compatibleMobiles.size() + " compatible mobiles.");

	    // 4. Return as DTO
	    PrimaryAndCompatibleModelsDto dto = new PrimaryAndCompatibleModelsDto(primaryModel, new ArrayList<>(compatibleMobiles));
	    dto.setProtectors(protectors); // ensure DTO has protectors

	    return dto;
	}
}
